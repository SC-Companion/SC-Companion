<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"
    />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Connexion | SC Companion</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        darkMode: "class",
        theme: {
          extend: {
            colors: {
              "sc-text": "#e2e8f0",
              "sc-text-secondary": "#94a3b8",
              "sc-accent": "#f97316",
            },
          },
        },
      };

      // Force dark mode
      document.documentElement.classList.add("dark");
      document.body.classList.add("dark");
    </script>
    <script
      src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"
      defer
    ></script>
    <link rel="stylesheet" href="../../public/css/styles.css" />

    <!-- Fallback styles for liquid glass effect -->
    <style>
      /* Force liquid glass effect */
      .liquid-glass {
        -webkit-backdrop-filter: blur(25px) saturate(200%) !important;
        backdrop-filter: blur(25px) saturate(200%) !important;
        background: linear-gradient(
          135deg,
          rgba(15, 23, 42, 0.4) 0%,
          rgba(30, 41, 59, 0.3) 25%,
          rgba(51, 65, 85, 0.2) 50%,
          rgba(71, 85, 105, 0.3) 75%,
          rgba(15, 23, 42, 0.4) 100%
        ) !important;
        border: 1px solid rgba(59, 130, 246, 0.3) !important;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4),
          inset 0 1px 0 rgba(255, 255, 255, 0.2),
          0 0 0 1px rgba(59, 130, 246, 0.2), 0 0 20px rgba(249, 115, 22, 0.1) !important;
        position: relative !important;
        overflow: hidden !important;
      }

      .gradient-bg {
        background: linear-gradient(
          135deg,
          #0a0e1a 0%,
          #1a2332 25%,
          #2d3748 50%,
          #4a5568 75%,
          #718096 100%
        ) !important;
        background-size: 400% 400% !important;
        animation: liquidGradient 15s ease-in-out infinite !important;
        position: relative !important;
        overflow: hidden !important;
      }

      @keyframes liquidGradient {
        0%,
        100% {
          background-position: 0% 50%;
        }
        50% {
          background-position: 100% 50%;
        }
      }

      @keyframes liquidGlassGlow {
        0%,
        100% {
          box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4),
            inset 0 1px 0 rgba(255, 255, 255, 0.2),
            0 0 0 1px rgba(59, 130, 246, 0.2), 0 0 20px rgba(249, 115, 22, 0.1);
        }
        50% {
          box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4),
            inset 0 1px 0 rgba(255, 255, 255, 0.2),
            0 0 0 1px rgba(59, 130, 246, 0.3), 0 0 30px rgba(249, 115, 22, 0.3),
            0 0 50px rgba(59, 130, 246, 0.2);
        }
      }

      .liquid-glass {
        animation: liquidGlassGlow 4s ease-in-out infinite !important;
      }

      /* Enhanced button styles */
      .sc-button {
        background: linear-gradient(
          135deg,
          #f97316,
          #ea580c 25%,
          #dc2626 50%,
          #ea580c 75%,
          #f97316
        ) !important;
        background-size: 200% 200% !important;
        border: 1px solid rgba(249, 115, 22, 0.4) !important;
        box-shadow: 0 4px 15px rgba(249, 115, 22, 0.3),
          inset 0 1px 0 rgba(255, 255, 255, 0.2) !important;
        font-weight: 600 !important;
        letter-spacing: 0.025em !important;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3) !important;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1) !important;
        position: relative !important;
        overflow: hidden !important;
      }

      .sc-button:hover {
        background-position: 100% 100% !important;
        transform: translateY(-3px) scale(1.05) !important;
        box-shadow: 0 20px 40px rgba(249, 115, 22, 0.4),
          0 0 0 1px rgba(249, 115, 22, 0.6),
          inset 0 1px 0 rgba(255, 255, 255, 0.3) !important;
      }

      /* Enhanced titlebar */
      .titlebar {
        background: rgba(15, 23, 42, 0.9) !important;
        backdrop-filter: blur(10px) !important;
        border-bottom: 1px solid rgba(59, 130, 246, 0.3) !important;
      }

      /* AGGRESSIVE TEXT COLOR OVERRIDE */
      * {
        color: #e2e8f0 !important;
      }

      /* Force input colors */
      input[type="text"],
      input[type="password"] {
        color: #ffffff !important;
        background-color: rgba(30, 41, 59, 0.5) !important;
        border-color: rgba(59, 130, 246, 0.3) !important;
      }

      input[type="text"]::placeholder,
      input[type="password"]::placeholder {
        color: #94a3b8 !important;
        opacity: 1 !important;
      }

      /* Force specific text colors */
      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        color: #ffffff !important;
      }

      p,
      span,
      label,
      div {
        color: #e2e8f0 !important;
      }

      /* Override any Tailwind dark mode */
      .dark,
      .dark *,
      [class*="dark"] {
        color: #e2e8f0 !important;
      }

      /* Force white text on all elements */
      body,
      body * {
        color: #e2e8f0 !important;
      }

      /* Specific overrides for better contrast */
      .text-black,
      .text-gray-900,
      .text-gray-800,
      .text-gray-700 {
        color: #e2e8f0 !important;
      }

      /* Force all text to be white/light */
      .text-black,
      .text-gray-900,
      .text-gray-800,
      .text-gray-700,
      .text-gray-600 {
        color: #e2e8f0 !important;
      }

      /* Override any remaining dark text */
      [class*="text-"] {
        color: #e2e8f0 !important;
      }

      /* Force white text on specific elements */
      .text-white,
      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        color: #ffffff !important;
      }
    </style>

    <script>
      // Force text colors immediately
      document.addEventListener("DOMContentLoaded", function () {
        // Force all text to be light colored
        const allElements = document.querySelectorAll("*");
        allElements.forEach((el) => {
          if (
            el.tagName !== "INPUT" &&
            el.tagName !== "BUTTON" &&
            el.tagName !== "A"
          ) {
            el.style.color = "#e2e8f0";
          }
        });

        // Force headings to be white
        const headings = document.querySelectorAll("h1, h2, h3, h4, h5, h6");
        headings.forEach((h) => {
          h.style.color = "#ffffff";
        });

        // Force inputs to have white text
        const inputs = document.querySelectorAll(
          'input[type="text"], input[type="password"]'
        );
        inputs.forEach((input) => {
          input.style.color = "#ffffff";
          input.style.backgroundColor = "rgba(30, 41, 59, 0.5)";
        });
      });
    </script>
  </head>
  <body class="gradient-bg h-screen font-sans overflow-hidden dark">
    <!-- Preloader -->
    <div
      id="preloader"
      class="fixed inset-0 z-50 flex items-center justify-center bg-white"
    >
      <div
        class="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600"
      ></div>
    </div>

    <!-- Custom Titlebar -->
    <%- include('partials/titlebar', { title: 'Connexion' }) %>

    <!-- Main Content -->
    <div
      class="relative h-full flex items-center justify-center p-4 overflow-y-auto"
    >
      <!-- Background Pattern -->
      <div class="absolute inset-0 overflow-hidden">
        <div
          class="absolute -top-40 -right-40 w-80 h-80 bg-white opacity-10 rounded-full"
        ></div>
        <div
          class="absolute -bottom-40 -left-40 w-80 h-80 bg-white opacity-10 rounded-full"
        ></div>
        <div
          class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-white opacity-5 rounded-full"
        ></div>
      </div>

      <!-- Login Card -->
      <div class="relative z-10 w-full max-w-md">
        <!-- Logo/Brand -->
        <div class="text-center mb-6">
          <div
            class="inline-flex items-center justify-center w-16 h-16 bg-gradient-sc rounded-full mb-4 shadow-lg animate-float"
          >
            <svg
              class="w-8 h-8 text-white"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M13 10V3L4 14h7v7l9-11h-7z"
              ></path>
            </svg>
          </div>
          <h1 class="text-3xl font-bold text-white mb-2">SC Companion</h1>
          <p class="text-slate-300">Votre assistant personnel</p>
        </div>

        <!-- Login Form -->
        <div class="liquid-glass rounded-2xl p-8 shadow-2xl animate-float">
          <div class="mb-6">
            <h2 class="text-2xl font-semibold text-white mb-2">Connexion</h2>
            <p class="text-slate-300">Entrez vos identifiants pour continuer</p>
          </div>

          <!-- Login Form -->
          <form id="loginForm" class="space-y-6">
            <!-- Username Field -->
            <div>
              <label
                for="username"
                class="block text-sm font-medium text-white mb-2"
              >
                Nom d'utilisateur <span class="text-orange-500">*</span>
              </label>
              <div class="relative">
                <input
                  type="text"
                  id="username"
                  name="username"
                  required
                  placeholder="Entrez votre nom d'utilisateur"
                  class="w-full px-4 py-3 bg-slate-800 bg-opacity-50 border sc-border rounded-lg text-white placeholder-slate-400 focus-sc input-focus"
                />
                <div class="absolute inset-y-0 right-0 flex items-center pr-3">
                  <svg
                    class="w-5 h-5 text-white text-opacity-50"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                    ></path>
                  </svg>
                </div>
              </div>
            </div>

            <!-- Password Field -->
            <div>
              <label
                for="password"
                class="block text-sm font-medium text-white mb-2"
              >
                Mot de passe <span class="text-orange-500">*</span>
              </label>
              <div class="relative">
                <input
                  type="password"
                  id="password"
                  name="password"
                  required
                  placeholder="Entrez votre mot de passe"
                  class="w-full px-4 py-3 bg-slate-800 bg-opacity-50 border sc-border rounded-lg text-white placeholder-slate-400 focus-sc input-focus"
                />
                <button
                  type="button"
                  id="togglePassword"
                  class="absolute inset-y-0 right-0 flex items-center pr-3 text-slate-400 hover:text-orange-500 transition-colors"
                >
                  <svg
                    id="eyeIcon"
                    class="w-5 h-5"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                    ></path>
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                    ></path>
                  </svg>
                </button>
              </div>
            </div>

            <!-- Remember Me & Forgot Password -->
            <div class="flex items-center justify-between">
              <label class="flex items-center">
                <input
                  type="checkbox"
                  class="w-4 h-4 text-orange-500 bg-slate-800/50 border sc-border rounded focus-sc"
                />
                <span class="ml-2 text-sm text-slate-300"
                  >Se souvenir de moi</span
                >
              </label>
              <a
                href="#"
                class="text-sm text-slate-300 hover:text-orange-500 transition-colors"
              >
                Mot de passe oublié ?
              </a>
            </div>

            <!-- Submit Button -->
            <button
              type="submit"
              class="w-full sc-button text-white font-semibold py-3 px-4 rounded-lg transition-all duration-300 transform hover:scale-105 hover:shadow-lg"
            >
              Se connecter
            </button>
          </form>

          <!-- Sign Up Link -->
          <div class="mt-6 text-center">
            <p class="text-slate-300">
              Pas encore de compte ?
              <a
                href="#"
                class="text-orange-500 font-semibold hover:text-orange-400 transition-colors"
              >
                Créer un compte
              </a>
            </p>
          </div>
        </div>

        <!-- Footer -->
        <div class="text-center mt-6 mb-4">
          <p class="text-slate-400 text-sm">
            © <%= new Date().getFullYear() %> SC Companion. Tous droits
            réservés.
          </p>
        </div>
      </div>
    </div>

    <script>
      // Hide preloader
      window.addEventListener("load", () => {
        const preloader = document.getElementById("preloader");
        if (preloader) {
          preloader.style.display = "none";
        }
      });

      // Password toggle
      document.addEventListener("DOMContentLoaded", () => {
        const togglePassword = document.getElementById("togglePassword");
        if (togglePassword) {
          togglePassword.addEventListener("click", function () {
            const password = document.getElementById("password");
            const eyeIcon = document.getElementById("eyeIcon");

            if (password.type === "password") {
              password.type = "text";
              eyeIcon.innerHTML = `
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"></path>
              `;
            } else {
              password.type = "password";
              eyeIcon.innerHTML = `
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
              `;
            }
          });
        }

        // Form submission
        const loginForm = document.getElementById("loginForm");
        if (loginForm) {
          loginForm.addEventListener("submit", async (e) => {
            e.preventDefault();

            const formData = new FormData(e.target);
            const username = formData.get("username");
            const password = formData.get("password");

            if (!username || !password) {
              alert("Veuillez remplir tous les champs");
              return;
            }

            try {
              // Simuler une connexion (à remplacer par votre logique d'authentification)
              const user = { username, id: Date.now() };

              // Envoyer les données de connexion au processus principal
              if (window.electronAPI && window.electronAPI.login) {
                window.electronAPI.login(user);
              } else {
                console.log("Connexion simulée:", user);
                alert("Connexion réussie pour: " + user.username);
              }
            } catch (error) {
              console.error("Erreur de connexion:", error);
              alert("Erreur lors de la connexion");
            }
          });
        }
      });
    </script>
  </body>
</html>
